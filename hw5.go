package main

import "fmt"

//Домашнее задание 4
func main() {
	fmt.Println("========================")
	fmt.Println("Задача 05.01.")
	fmt.Println("========================")
	task0501()
	fmt.Println("========================")
	fmt.Println("Задача 05.02.")
	fmt.Println("========================")
	task0502()
	fmt.Println("========================")
	fmt.Println("Задача 05.03.")
	fmt.Println("========================")
	task0503()
	fmt.Println("========================")
	fmt.Println("Задача 05.04.")
	fmt.Println("========================")
	task0504()
	fmt.Println("========================")
	fmt.Println("Задача 05.05.")
	fmt.Println("========================")
	task0505()
	fmt.Println("========================")
	fmt.Println("Задача 05.06.")
	fmt.Println("========================")
	task0506()
	fmt.Println("========================")
	fmt.Println("Задача 05.07.")
	fmt.Println("========================")
	task0507()
	fmt.Println("========================")
	fmt.Println("Задача 05.08.")
	fmt.Println("========================")
	task0508()

}

func task0501() {
	/*Задача 1. Определение координатной плоскости точки
	Что нужно сделать
	В различных программах часто приходится работать с координатами, это могут быть системы проектирования или игры.
	Ключевой момент в таких программах, это работа с системой координат. Давайте поможем пользователю определить, к какой координатной четверти принадлежит точка.
	Пользователь вводит числа x, y, а программе необходимо вывести, какой координатной четверти принадлежит точка с координатами (x, y), при условии:
	    если обе координаты положительны, то точка находится в первой четверти координатной плоскости;
	    если координата х отрицательна, а координата у положительна, то точка находится во второй четверти;
	    если обе координаты отрицательны, то число находится в третьей четверти;
	    если координата х положительна, а координата у отрицательна, то точка лежит в четвертой четверти.

	Советы и рекомендации
	Использовать логическое умножение.*/
}

func task0502() {
	/*Задача 2. Проверить, что одно из чисел положительное
	Что нужно сделать
	Проверка пользовательского ввода на различные ограничения является частой задачей.
	Давайте попросим пользователя ввести 3 числа и проверим, что хотя бы одно является положительным.
	Результат проверки необходимо сообщить пользователю.

	Советы и рекомендации
	Использовать логическое сложение.*/
}
func task0503() {
	/*Задача 3. Проверить, что есть совпадающие числа
	Что нужно сделать
	Пользователь при вводе может ошибиться, и многие программы пытаются привлечь внимание к таким ошибкам.
	Например, текстовые редакторы подсвечивают ошибки в словах, электронные таблицы — в формулах.
	Давайте реализуем программу, запрашивающую у пользователя три числа, и выводящую подсказку, если два или более числа совпадают.

	Советы и рекомендации
	Использовать логическое сложение.*/
}

func task0504() {
	/*Задача 4. Сумма без сдачи
	Что нужно сделать
	Программное обеспечение банкоматов постоянно решает задачу, как имеющимися купюрами сформировать сумму, введенную пользователем.
	Давайте попробуем решить похожую задачу, и определить, сможет ли пользователь заплатить за товар без сдачи или нет.
	Для этого он будет вводить стоимость товара и номиналы трех монет.
	Примеры работы программы:
	сумма:
	7
	монеты:
	1
	2
	5
	Пользователь может оплатить без сдачи
	сумма:
	9
	монеты:
	5
	2
	5
	Пользователь не может оплатить без сдачи

	Советы и рекомендации
	Необходимо проверить все сценарии, когда сумма может быть сформирована одной монетой, двумя или всеми тремя.*/

}

func task0505() {
	/*Задача 5. Определение максимальных процентов
	Что нужно сделать
	Задача учебная, и человек с ней справится сам, но давайте научим нашу программу определять, какие две из предложенных ставок по депозитам являются максимальными.
	Пользователь будет вводить три процентные ставки, а программа должна вывести, какие две из них являются более выгодными.

	Советы и рекомендации
	Задачу можно решать несколькими способами, например, от противного.	*/

}

func task0506() {
	/*Задача 6. Решение квадратного уравнения
	Что нужно сделать
	Что компьютеры делают быстрее людей? Проводят вычисления!
	Давайте напишем программу, решающую квадратные уравнения. Пользователь вводит коэффициенты a, b и c квадратного уравнения.
	Программа должна вывести корни уравнения. Для решения уравнения необходимо:
	Вычислить дискриминант по формуле:
	Если D>0, будет два различных корня, которые находятся по формуле.
	Если D = 0, будет один корень, который находится по формуле.
	Если D < 0, то вывести, что корней нет.

	Советы и рекомендации
	Для возведения b в квадрат, можно воспользоваться умножением, а можно функцией math.Pow (при ее использовании переменная b должна быть типа float64).
	Для вычисления квадратного корня необходимо воспользоваться функцией math.Sqrt.*/

}
func task0507() {
	/*Задача 7. Счастливый билет
	Что нужно сделать
	Все мы в детстве, да и не только в детстве, получив бумажный билет, проверяли, а не является ли он “счастливым”. Давайте напишем программу, в которую пользователь будет вводить четырехзначный номер билета, а программа будет выводить, является ли он счастливым (сумма старших двух разрядов равна сумме двух младших разрядов) или даже зеркальным.
		Например:
		1234 -> обычный билет
		3425 -> счастливый билет
		1221 -> зеркальный билет

	Советы и рекомендации
	При решении задачи необходимо применить целочисленное деление и остаток от деления.	*/

}
func task0508() {
	/*Задача 8. Игра “Угадывание числа” (дополнительно)
	Что нужно сделать
	Ну, и какой же компьютер без игр? Давайте научим его играть в “угадывание чисел”. Пользователь загадывает число от 1 до 10 (включительно).
	Программа пытается это число угадать, для этого она выводит число, а пользователь должен ответить угадала программа, загаданное число больше или меньше.

	Советы и рекомендации
	Программа не должна делать больше 4 попыток в процессе угадывания.
	*/
}
